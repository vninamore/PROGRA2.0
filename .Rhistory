scale_x_discrete("Sexo") +     # configuración eje X (etiqueta del eje)
scale_y_continuous("Frecuencia") +
labs(title = "Gráfico de barras 2",
subtitle = "Frecuencia absoluta de la variable sexo")
ggplot(alta, aes(x = Pais)) +
geom_bar(width = 0.4,  fill=rgb(0.1,1,0.5,0.7),aes(y=alfabetizacion)) +
scale_x_discrete("Sexo") +     # configuración eje X (etiqueta del eje)
scale_y_continuous("Frecuencia") +
labs(title = "Gráfico de barras 2",
subtitle = "Frecuencia absoluta de la variable sexo")
![práctica](https://www.pikpng.com/transpng/hRmJTih/)
![práctica](https://es.m.wikipedia.org/wiki/Archivo:UNMSM_coatofarms_seal.svg)
<img src="https://upload.wikimedia.org/wikipedia/commons/3/3a/UNMSM_coatofarms_seal.svg" alt="JuveR" width="300px">
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
plot(funcion)
installed.packages(tidyverse)
library(tidyverse)
source("~/.active-rstudio-document")
library(ggplot2)
install.packages(reshape2)
install.packages("tidyverse")
install.packages("tidyverse")
library(ggplot2)
library(reshape2)
install.packages("reshape2")
library(reshape2)
View(mon)
month
View(month)
View("month")
View("mon")
View(funcion)
%B
month_levels
month.abb
plot(funcion)
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
x<-month.abb
plot(funcion)
plot(month.abb, funcion)
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
n<-month.abb
plot(n, funcion)
plot(n, funcion, main = "Ecuación del tiempo")
plot(n, rnorm(funcion), main = "Gráfico basado en fechas")
plot(funcion, 0, n, main = "Trazar una función")
plot(funcion, 0, n, main = "Trazar una función")
install.packages("latex2exp")
library(latex2exp)
n
plot(n, funcion, main = TeX('Ecuación del tiempo'))
plot(x, y, xaxt = "n", main = "xaxt = 'n'")
plot(x, funcion, xaxt = "n", main = "xaxt = 'n'")
mtext("Texto abajo", side = 1)
mtext(n, side = 1)
plot(x, funcion, xaxt = "n", main = "xaxt = 'n'")
mtext(n, side = 1)
plot(x, funcion, xaxt = "n")
axis(1, at = seq(round(min(x)), round(max(x)), by = 1), labels = n)
plot(x, funcion, axes = FALSE)
# Añadir el eje X
axis(1)
plot(n, funcion, axes = FALSE)
# Añadir el eje X
axis(1)
plot(n, y, axes = FALSE)
# Añadir el eje X
axis(1)
# Añadir el eje X
axis(2)
plot(n, y, axes = FALSE)
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
n<-month.abb
n<-x/30.5
plot(n, funcion, xaxt = "n", main = "xaxt = 'n'")
mtext(n, side = 1)
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
n<-month.abb
n<-x/30.5
m<-month.abb
plot(n, funcion, xaxt = "n", main = "xaxt = 'n'")
mtext(m, side = 1)
plot(m, funcion)
plot(n, funcion)
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
n<-month.abb
n<-x/30.5
m<-month.abb
plot(n, funcion)
plot(n, funcion, xaxt = "n")
axis(1, at = seq(round(min(x)), round(max(x)), by = 1), labels =m)
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
n<-month.abb
n<-x/30.5
m<-month.abb
plot(n=m, funcion)
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
n<-month.abb
n<-x/30.5
m<-month.abb
plot(n, funcion)
plot(n, funcion, xaxt = "n")
axis(1, at = seq(round(min(n)), round(max(n)), by = 1), labels =m)
plot(n, funcion, xaxt = "n")
axis(1, at = seq(round(min(n)), round(max(n)), by = 0), labels =m)
plot(n, funcion, xaxt = "n")
axis(0, at = seq(round(min(n)), round(max(n)), by = 1), labels =m)
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
n<-month.abb
n<-x/30.5
m<-month.abb
plot(n, funcion)
plot(n, funcion, xaxt = "n")
axis(1, at = seq(round(min(n)), round(max(n)), by = 1), labels =m)
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
n<-month.abb
n<-x/33.27
m<-month.abb
plot(n, funcion)
plot(n, funcion, xaxt = "n")
axis(1, at = seq(round(min(n)), round(max(n)), by = 1), labels =m)
x<-0:365
y<-pi*2*(x-81)/365
funcion<-9.87*sin(2*y)-7.35*cos(y)-1.5*sin(y)
n<-month.abb
n<-x/33.27
m<-month.abb
plot(n, funcion, xaxt = "n")
axis(1, at = seq(round(min(n)), round(max(n)), by = 1), labels =m)
funcion
#9) Si la variable conc recoge la concentración de plomo (en ppm) en el aire de cierta zona durante un día completo
#a) ¿Cuál ha sido la concentración máxima?
max(conc)
#9) Si la variable conc recoge la concentración de plomo (en ppm) en el aire de cierta zona durante un día completo
#a) ¿Cuál ha sido la concentración máxima?
conc
install.packages("tidyverse")
library(tidyverse)
#9) Si la variable conc recoge la concentración de plomo (en ppm) en el aire de cierta zona durante un día completo
#a) ¿Cuál ha sido la concentración máxima?
conc
concentrac <- dplyr::tibble(values = conc)
concentrac %>%
dplyr::summarise(max(values))
#9) Si la variable conc recoge la concentración de plomo (en ppm) en el aire de cierta zona durante un día completo
#a) ¿Cuál ha sido la concentración máxima?
load("https://goo.gl/uDzU8v")
#9) Si la variable conc recoge la concentración de plomo (en ppm) en el aire de cierta zona durante un día completo
#a) ¿Cuál ha sido la concentración máxima?
load(url("https://goo.gl/uDzU8v"))
length(conc[conc > 40])
max(conc)
#b) ¿En cuántos de los muestreos se ha superado la concentración de 40.0 ppm?
length(conc[conc > 40])
#c) ¿Cuál ha sido la concentración media del día?
mean(conc)
#d) ¿Cuáles fueron las 10 mediciones más bajas del día?
sort(conc)[1:10]
fecha <- seq(
as.POSIXct("2021-01-01 00:00"),
length.out = length(conc),
by = "5 min"
)
#concentracion de plomo y las fechas
concYfech <- data.frame(conc, date1)
#concentracion de plomo y las fechas
concYfech <- data.frame(conc, fecha)
#maximo de concentracion con fecha
concYfech[conc == max(conc),]
#SEGUNDA PARTE
matrix(c(1:10,(1:10)^2), nrow = 10)
plot(z)
z<-matrix(c(1:10,(1:10)^2), nrow = 10)
ggplot(data = z) +
geom_point(mapping = aes(x = eje_x, y = eje_y), color = "blue")
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(ggplot2)
z<-matrix(c(1:10,(1:10)^2), nrow = 10)
ggplot(data = z) +
geom_point(mapping = aes(x = eje_x, y = eje_y), color = "blue")
library(dplyr)
notasEst <- dplyr::tibble(grupoAyB = grupo, notaAyB = nota)
notasEst %>%
dplyr::filter((grupoAyB == "A" & notaAyB >=5) | (grupoAyB == "B" & notaAyB >= 5)) %>%
dplyr::summarise(mean(notaAyB))
library(ggplot2)
notasEst <- dplyr::tibble(grupo, nota)
notasEst %>% ggplot(mapping = aes(x = grupo, y = nota)) +
geom_boxplot()
fecha <- seq(
as.POSIXct("2021-01-01 00:00"),
length.out = length(conc),
by = "5 min"
)
concYfech <- data.frame(conc, fecha)
concYfech[conc == max(conc),]
z<-matrix(c(1:10,(1:10)^2), nrow = 10)
DF2 = as.data.frame(t(z))
DF2
ggplot(data = DF2) +
geom_point(mapping = aes(x = eje_x, y = eje_y), color = "blue")
ggplot(data = DF2) +
geom_point(mapping = aes(x = x, y = y), color = "blue")
ggplot(data = DF2) +
geom_point(mapping = aes(x = 1, y = 2), color = "blue")
DF2 = as.data.frame(t(z)), row.names= c(eje_x, eje_y))
DF2
DF2 = as.data.frame((t(z)), row.names= c(eje_x, eje_y))
DF2
ggplot(data = DF2) +
geom_point(mapping = aes(x = 1, y = 2), color = "blue")
z<-matrix(c(1:10,(1:10)^2), nrow = 10)
DF2 = as.data.frame((t(z)), row.names= c(eje_x, eje_y))
DF2
ggplot(data = DF2) +
geom_point(mapping = aes(x =eje_x , y = eje_y), color = "blue")
DF2 = as.data.frame((t(z)), row.names= c(eje_x, eje_y))
DF2 = as.data.frame(t(z), row.names= c(eje_x, eje_y))
DF2 = as.data.frame(t(z), row.names= c("eje_x", "eje_y"))
DF2
ggplot(data = DF2) +
geom_point(mapping = aes(x =eje_x , y = eje_y), color = "blue")
geom_point(mapping = aes(x ='eje_x' , y = 'eje_y'), color = "blue")
ggplot(data = DF2) +
geom_point(mapping = aes(x ='eje_x' , y = 'eje_y'), color = "blue")
ggplot(data = DF2) +
geom_point(mapping = aes(x =eje_x , y =eje_y), color = "blue")
ggplot(data = DF2) +
geom_point(mapping = aes(x =DF2[,1] , y =DF2[,2]), color = "blue")
ggplot(data = DF2) +
geom_point(mapping = aes(x =DF2 , y =DF2), color = "blue")
View(DF2)
z<-matrix(c(1:10,(1:10)^2), nrow = 10)
DF2 = as.data.frame((z), row.names= c("eje_x", "eje_y"))
View(DF2)
ggplot(data = DF2) +
geom_point(mapping = aes(x =V1 , y =V2), color = "blue")
ggplot(data = DF2) +
geom_point(mapping = aes(x =V1 , y =V2), color = clase)
ggplot(data = DF2) +
geom_point(mapping = aes(x =V1 , y =V2, color= clase))
ggplot(data = DF2) +
geom_point(mapping = aes(x =V1, y =V2, color= clase))
ggplot(data = DF2) +
geom_point(mapping = aes(x =V1 , y =V2), color = "blue")
matrix(c(1,2,3,2,4,6,3,6,9,4,8,12), nrow = 4, byrow = T)
#3)
diag(x = 1,nrow = 3)
matrix_null <- function(val1,val2){
resultado <- matrix(0, nrow = val1, ncol = val2)
return(resultado)
}
matrix_null(4,5)
matriz_cero <- function(val1,val2){
resultado <- matrix(0, nrow = val1, ncol = val2)
return(resultado)
}
matrix_cero(4,5)
matriz_cero <- function(val1,val2){
resultado <- matrix(0, nrow = val1, ncol = val2)
return(resultado)
}
matriz_cero(4,5)
diag(x = c(0,2,3,4),nrow = 4)
matriz <- matrix(c(1,2,3,2,4,6,3,6,9,4,8,12), nrow = 4, byrow = T)
t(matriz)
B1 <- diag(x = c(0,2,3,4),nrow = 4)
3*B1
#d)
B1%*%A1
matriz_A <- matrix(c(1,2,3,2,4,6,3,6,9,4,8,12), nrow = 4, byrow = T)
t(matriz)
matriz_B <- diag(x = c(0,2,3,4),nrow = 4)
3*matriz_B
matriz_B%*%matriz_A
P = matrix(c(1,2,3,-2,4,-2,1,0,1), nrow = 3, byrow = T)
potencia <- function(x,k){
r <- diag(dim(x)[2])
for(i in 1:k){
r <- r%*%x
}
r
}
potencia(P,6)
A2 <- rbind(c(3, -1, 1),
c(9, -2, 1),
c(3, 1, -2))
B2 <- c(-1, -9, -9)
solve(A2, B2)
ecuaciones <- rbind(c(3, -1, 1),
c(9, -2, 1),
c(3, 1, -2))
equivalencias <- c(-1, -9, -9)
solve(ecuaciones, equivalencias)
B <- matrix(c(1:10, seq(2, 20, by = 2), seq(3, 30, by = 3), seq(4, 40, by = 4),
seq(5, 50, by = 5)), nrow = 10)
A <- matrix(c(rep(c(0,1),7), rep(c(0,0,1),2),1,0,1,1,0), nrow = 5, byrow = T)
(B)%*%(A)-(A)%*%t(B)
x2 <- matrix(c(rep(1,5), 1, -1, 0:2), nrow = 5, byrow = F)
y2 <- matrix(c(0,0,1,1,3), nrow = 5, byrow = F)
solve(t(x2)%*%x2)%*%t(x2)%*%y2
data("co2")
means = aggregate(co2, FUN=mean)
year = as.vector(time(means))
co2 = as.vector(means)
df_co2 <- data.frame(year = year, co2 = co2) %>%
mutate(co2_2 = lag(co2), dif_co2 = co2 - co2_2)
vect_diferencia <- df_co2$dif_co2[2:39]
vect_diferencia
df_co2 <- data.frame(year = year, co2 = co2) %>%
mutate(co2_2 = lag(co2), dif_co2 = co2 - co2_2)
vect_diferencia <- df_co2$dif_co2[2:39]
co2
df_co2 <- data.frame(year = year, co2 = co2) %>%
mutate(co2_2 = lag(co2), dif_co2 = co2 - co2_2)
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
df_co2 <- data.frame(year = year, co2 = co2) %>%
mutate(co2_2 = lag(co2), dif_co2 = co2 - co2_2)
vect_diferencia <- df_co2$dif_co2[2:39]
vect_diferencia
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
a<- function(x=0.3, y=0.15){
valNum<- ((x*y)/((x*y)+(0.2*0.8)+(0.5*0.12)))
return(valNum)
}
a()
#b)
b<- function(m=5, n=6){
valNumb<- (((m^n)/factorial(n))*(exp(-m)))
return(valNumb)
}
b()
#c)
c<- function(h=20, g=7){
valNumc<- (choose(h,g)*(0.4^7)*(0.6^13))
return(valNumc)
}
c()
#2)
#a)
sum(1:1000)
#b)
sum(2^(0:10))
#3)
#a)
load("ei1012-1516-la-s1-datos (1).RData")
grupo
length(grupo)
#b)
which(grupo == "A")
#4)
#a)
nota
sum(nota)
#b)
mean(nota)
#c)
which(nota>=7.0)
#d)
sort(nota, decreasing = T)
#e)
which(nota == max(nota))
#5)
#a)
sum(nota[1:10])
#b)
length(grupo[grupo=="C"])
#c)
length(nota[nota>=5])
#d)
length(nota[grupo == "B" & nota >= 5])
#e)
(length(nota[grupo == "C" & nota >= 5])/length(nota[grupo == "C"]))*100
#f)
grupo[nota == max(nota)]
grupo[nota == min(nota)]
#g)
library(dplyr)
notasEst <- dplyr::tibble(grupoAyB = grupo, notaAyB = nota)
notasEst %>%
dplyr::filter((grupoAyB == "A" & notaAyB >=5) | (grupoAyB == "B" & notaAyB >= 5)) %>%
dplyr::summarise(mean(notaAyB))
#6)
#cuantil 66 de todos
quantile(nota, probs = 0.66)
#cuantil 66 del grupo'C' solamente"
quantile(nota[grupo=="C"], probs = 0.66)
#7) Un alumno tiene una nota de 4.9.
#Â¿QuÃ© porcentaje, del total de alumnos, tiene una nota menor o igual que la suya?
((length(nota[nota <= 4.9]))/(length(nota)))*100
#Â¿Y quÃ© porcentaje tiene una nota mayor o igual que la suya?
((length(nota[nota >= 4.9]))/(length(nota)))*100
#8) Realiza el grÃ¡fico de diagramas de caja de las notas de cada grupo,
#para poder comparar el nivel de cada uno de ellos.
library(ggplot2)
notasEst <- dplyr::tibble(grupo, nota)
notasEst %>% ggplot(mapping = aes(x = grupo, y = nota)) +
geom_boxplot()
#9) Si la variable conc recoge la concentraciÃ³n de plomo (en ppm) en el aire de cierta zona durante un dÃ­a completo
#a) Â¿CuÃ¡l ha sido la concentraciÃ³n mÃ¡xima?
load(url("https://goo.gl/uDzU8v"))
max(conc)
#b) Â¿En cuÃ¡ntos de los muestreos se ha superado la concentraciÃ³n de 40.0 ppm?
length(conc[conc > 40])
#c) Â¿CuÃ¡l ha sido la concentraciÃ³n media del dÃ­a?
mean(conc)
#d) Â¿CuÃ¡les fueron las 10 mediciones mÃ¡s bajas del dÃ­a?
sort(conc)[1:10]
#e) Si la primera medida fue a las 00:00. Â¿A quÃ© hora del dÃ­a se alcanzÃ³ la concentraciÃ³n mÃ¡xima?
fecha <- seq(
as.POSIXct("2021-01-01 00:00"),
length.out = length(conc),
by = "5 min"
)
#concentracion de plomo y las fechas
concYfech <- data.frame(conc, fecha)
#maximo de concentracion con fecha
concYfech[conc == max(conc),]
#SEGUNDA PARTE
#1)
z<-matrix(c(1:10,(1:10)^2), nrow = 10)
DF2 = as.data.frame((z), row.names= c("eje_x", "eje_y"))
View(DF2)
ggplot(data = DF2) +
geom_point(mapping = aes(x =V1 , y =V2), color = "blue")
#2)
matrix(c(1,2,3,2,4,6,3,6,9,4,8,12), nrow = 4, byrow = T)
#3)
diag(x = 1,nrow = 3)
#4)
matriz_cero <- function(val1,val2){
resultado <- matrix(0, nrow = val1, ncol = val2)
return(resultado)
}
matriz_cero(4,5)
#5)
diag(x = c(0,2,3,4),nrow = 4)
#6)
matriz_A <- matrix(c(1,2,3,2,4,6,3,6,9,4,8,12), nrow = 4, byrow = T)
t(matriz)
#7)
#c)
matriz_B <- diag(x = c(0,2,3,4),nrow = 4)
3*matriz_B
#d)
matriz_B%*%matriz_A
#8)
P = matrix(c(1,2,3,-2,4,-2,1,0,1), nrow = 3, byrow = T)
potencia <- function(x,k){
r <- diag(dim(x)[2])
for(i in 1:k){
r <- r%*%x
}
r
}
potencia(P,6)
#9)
ecuaciones <- rbind(c(3, -1, 1),
c(9, -2, 1),
c(3, 1, -2))
equivalencias <- c(-1, -9, -9)
solve(ecuaciones, equivalencias)
#10)
#?eigen()
#?det()
#11)
B <- matrix(c(1:10, seq(2, 20, by = 2), seq(3, 30, by = 3), seq(4, 40, by = 4),
seq(5, 50, by = 5)), nrow = 10)
A <- matrix(c(rep(c(0,1),7), rep(c(0,0,1),2),1,0,1,1,0), nrow = 5, byrow = T)
(B)%*%(A)-(A)%*%t(B)
#12)
x2 <- matrix(c(rep(1,5), 1, -1, 0:2), nrow = 5, byrow = F)
y2 <- matrix(c(0,0,1,1,3), nrow = 5, byrow = F)
solve(t(x2)%*%x2)%*%t(x2)%*%y2
#13)
data("co2")
means = aggregate(co2, FUN=mean)
year = as.vector(time(means))
co2 = as.vector(means)
co2
df_co2 <- data.frame(year = year, co2 = co2) %>%
mutate(co2_2 = lag(co2), dif_co2 = co2 - co2_2)
vect_diferencia <- df_co2$dif_co2[2:39]
vect_diferencia
